//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Banking_System.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BankingEntities : DbContext
    {
        public BankingEntities()
            : base("name=BankingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Transactions> Transactions { get; set; }
        public virtual DbSet<TypeOfAccounts> TypeOfAccounts { get; set; }
    
        public virtual int Deposit(string typ_Acc, Nullable<decimal> amount, Nullable<int> accId, ObjectParameter message)
        {
            var typ_AccParameter = typ_Acc != null ?
                new ObjectParameter("Typ_Acc", typ_Acc) :
                new ObjectParameter("Typ_Acc", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var accIdParameter = accId.HasValue ?
                new ObjectParameter("AccId", accId) :
                new ObjectParameter("AccId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deposit", typ_AccParameter, amountParameter, accIdParameter, message);
        }
    
        public virtual ObjectResult<Display_Accounts_Result> Display_Accounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Accounts_Result>("Display_Accounts");
        }
    
        public virtual ObjectResult<Display_Clients_Result> Display_Clients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Clients_Result>("Display_Clients");
        }
    
        public virtual ObjectResult<Display_Specific_Account_Result> Display_Specific_Account(Nullable<int> accNum)
        {
            var accNumParameter = accNum.HasValue ?
                new ObjectParameter("accNum", accNum) :
                new ObjectParameter("accNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Specific_Account_Result>("Display_Specific_Account", accNumParameter);
        }
    
        public virtual ObjectResult<Display_Specific_Client_Result> Display_Specific_Client(string cli_name)
        {
            var cli_nameParameter = cli_name != null ?
                new ObjectParameter("Cli_name", cli_name) :
                new ObjectParameter("Cli_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Specific_Client_Result>("Display_Specific_Client", cli_nameParameter);
        }
    
        public virtual int Insert_Into_Transaction(string tranType, Nullable<decimal> balance, string typ_Acc, ObjectParameter message)
        {
            var tranTypeParameter = tranType != null ?
                new ObjectParameter("TranType", tranType) :
                new ObjectParameter("TranType", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var typ_AccParameter = typ_Acc != null ?
                new ObjectParameter("Typ_Acc", typ_Acc) :
                new ObjectParameter("Typ_Acc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Into_Transaction", tranTypeParameter, balanceParameter, typ_AccParameter, message);
        }
    
        public virtual int InsertIntoAcc(Nullable<int> c_Id, string typ_Acc, Nullable<decimal> balance, ObjectParameter message)
        {
            var c_IdParameter = c_Id.HasValue ?
                new ObjectParameter("C_Id", c_Id) :
                new ObjectParameter("C_Id", typeof(int));
    
            var typ_AccParameter = typ_Acc != null ?
                new ObjectParameter("Typ_Acc", typ_Acc) :
                new ObjectParameter("Typ_Acc", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoAcc", c_IdParameter, typ_AccParameter, balanceParameter, message);
        }
    
        public virtual int InsertIntoClients(string fullName, string jop, Nullable<int> phoneNum, string address, string typ_Acc, Nullable<decimal> balance, ObjectParameter message)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var jopParameter = jop != null ?
                new ObjectParameter("Jop", jop) :
                new ObjectParameter("Jop", typeof(string));
    
            var phoneNumParameter = phoneNum.HasValue ?
                new ObjectParameter("PhoneNum", phoneNum) :
                new ObjectParameter("PhoneNum", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var typ_AccParameter = typ_Acc != null ?
                new ObjectParameter("Typ_Acc", typ_Acc) :
                new ObjectParameter("Typ_Acc", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoClients", fullNameParameter, jopParameter, phoneNumParameter, addressParameter, typ_AccParameter, balanceParameter, message);
        }
    
        public virtual int Transfare(string typ_Acc, string typ_Acc2, Nullable<decimal> amount, Nullable<int> accId, Nullable<int> accId2, ObjectParameter message)
        {
            var typ_AccParameter = typ_Acc != null ?
                new ObjectParameter("Typ_Acc", typ_Acc) :
                new ObjectParameter("Typ_Acc", typeof(string));
    
            var typ_Acc2Parameter = typ_Acc2 != null ?
                new ObjectParameter("Typ_Acc2", typ_Acc2) :
                new ObjectParameter("Typ_Acc2", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var accIdParameter = accId.HasValue ?
                new ObjectParameter("AccId", accId) :
                new ObjectParameter("AccId", typeof(int));
    
            var accId2Parameter = accId2.HasValue ?
                new ObjectParameter("AccId2", accId2) :
                new ObjectParameter("AccId2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfare", typ_AccParameter, typ_Acc2Parameter, amountParameter, accIdParameter, accId2Parameter, message);
        }
    
        public virtual int Withdraw(string typ_Acc, Nullable<decimal> amount, Nullable<int> accId, ObjectParameter message)
        {
            var typ_AccParameter = typ_Acc != null ?
                new ObjectParameter("Typ_Acc", typ_Acc) :
                new ObjectParameter("Typ_Acc", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var accIdParameter = accId.HasValue ?
                new ObjectParameter("AccId", accId) :
                new ObjectParameter("AccId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Withdraw", typ_AccParameter, amountParameter, accIdParameter, message);
        }
    
        public virtual ObjectResult<Display_Employee_Result> Display_Employee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Employee_Result>("Display_Employee");
        }
    
        public virtual ObjectResult<Display_Specific_Employee_Result> Display_Specific_Employee(string empName)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Specific_Employee_Result>("Display_Specific_Employee", empNameParameter);
        }
    
        public virtual ObjectResult<Display_Specific_Transaction_Result> Display_Specific_Transaction(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Specific_Transaction_Result>("Display_Specific_Transaction", nameParameter);
        }
    
        public virtual ObjectResult<Display_Transactions_Result> Display_Transactions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Display_Transactions_Result>("Display_Transactions");
        }
    }
}
